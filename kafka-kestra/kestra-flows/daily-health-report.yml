id: daily-health-report
namespace: solar.monitoring

description: |
  Generates a comprehensive daily health report.
  Calculates SLA, uptime, and performance metrics.

labels:
  team: data-engineering
  component: reporting

tasks:
  # ====================
  # Step 1: Calculate Daily Statistics
  # ====================
  - id: daily-stats
    type: io.kestra.plugin.scripts.shell.Commands
    runner: PROCESS
    commands:
      - |
        docker exec tdengine taos -s "
        -- Total records written today
        SELECT 
          COUNT(*) as total_records,
          COUNT(DISTINCT tbname) as active_devices,
          AVG(poweroutput_kw) as avg_power,
          SUM(poweroutput_kw * 10 / 3600) as total_energy_kwh
        FROM renewables.solarfarms
        WHERE ts >= TODAY;
        
        -- Pipeline health summary
        SELECT 
          overall_status,
          COUNT(*) as count,
          AVG(data_flow_health) as avg_health
        FROM renewables.pipeline_health_summary
        WHERE ts >= TODAY
        GROUP BY overall_status;
        "

  # ====================
  # Step 2: Calculate SLA (Uptime)
  # ====================
  - id: calculate-sla
    type: io.kestra.plugin.scripts.node.Script
    script: |
      // Expected: 1440 health checks per day (every minute)
      // In this case: 2880 checks (every 30 seconds)
      
      const totalChecks = 2880;
      const healthyChecks = 2850; // This would come from actual data
      
      const sla = (healthyChecks / totalChecks) * 100;
      
      const report = {
        date: new Date().toISOString().split('T')[0],
        sla: sla.toFixed(2) + '%',
        uptime_hours: (healthyChecks / 120).toFixed(1), // 120 checks per hour
        total_records: 'TBD', // Would come from previous step
        status: sla >= 99.9 ? 'EXCELLENT' : sla >= 99 ? 'GOOD' : 'NEEDS_ATTENTION'
      };
      
      console.log('Daily Report:');
      console.log(JSON.stringify(report, null, 2));

  # ====================
  # Step 3: Export Report
  # ====================
  - id: export-report
    type: io.kestra.plugin.scripts.shell.Commands
    runner: PROCESS
    commands:
      - |
        echo "Daily Solar Farm Pipeline Report" > /tmp/report.txt
        echo "Date: $(date)" >> /tmp/report.txt
        echo "================================" >> /tmp/report.txt
        echo "{{ outputs['daily-stats'].stdout }}" >> /tmp/report.txt
        cat /tmp/report.txt

  # ====================
  # Step 4: Send Report
  # ====================
  - id: send-report
    type: io.kestra.plugin.scripts.shell.Commands
    runner: PROCESS
    commands:
      - |
        curl -X POST "{{ secret('SLACK_WEBHOOK') }}" \
          -H 'Content-Type: application/json' \
          -d '{
            "text": "ðŸ“Š Daily Pipeline Report",
            "blocks": [{
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "*Daily Solar Farm Report*\nDate: {{ execution.startDate | date(\"yyyy-MM-dd\") }}\nSee Kestra execution for full report"
              }
            }]
          }'

triggers:
  - id: daily-at-midnight
    type: io.kestra.core.models.triggers.types.Schedule
    cron: "0 0 * * *"  # Daily at midnight
